#!/usr/sbin/nft -t

table inet wg_extension
delete table inet wg_extension

define ifnm_wg = "wgs0"
define if_eth = ${DEFAULT_INTERFACE}
define wg_port = 59912
define ip4_wg = 192.168.10.1
define ip6_wg = fd00:1::1
define fwmark_wg = 0x0000ca6c

define fwmark_nat = 0x000aaaa

# iifname can be used even when the interface doesn't currently exist, PreUp and PostDown works.
table inet wg_extension {
	counter tunnel_in {}
	counter tunnel_out {}
	counter simple {}

	# Copied this from wg-quick rules, only allows access to this peer address to the tunnel peers
	# and local addresses
	chain wg_preraw {
		type filter hook prerouting priority raw; policy accept;
		iifname != $ifnm_wg ip daddr $ip4_wg fib saddr type != local drop
		iifname != $ifnm_wg ip6 daddr $ip6_wg fib saddr type != local drop
	}

	chain wg_premangle {
		type filter hook prerouting priority mangle; policy accept;
		meta l4proto udp mark set ct mark
		ct mark $fwmark_wg counter name tunnel_in
	}

	chain wg_postmangle {
		type filter hook output priority mangle; policy accept;
		meta l4proto udp mark $fwmark_wg counter name tunnel_out ct mark set meta mark
	}

	# Set separate distinguishing mark for non-tunneled stuff
	chain wg_forward {
		type filter hook forward priority mangle; policy accept;
		# mark check here is not required
		iifname $ifnm_wg mark != $fwmark_wg counter name simple meta mark set $fwmark_nat
	}

	# Masquerade previously marked non-tunneled stuff forwarded by interface
	chain wg_postrouting_nat {
		type nat hook postrouting priority srcnat;
		iifname $ifnm_wg mark $fwmark_nat masquerade fully-random
	}
}

table inet Main {
    chain input_filter_extra {
        iif $if_eth udp dport $wg_port accept 
    }
}

